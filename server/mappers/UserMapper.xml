<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="UserMapper">

    <!-- 단일행 조회를 위한 기능 정의 -->
    <select id="selectItem">
        SELECT loginId, pwd, userName, date_format(bthDate, '%Y-%m-%d') as bthDate, email, postNum, address, phoneNum, profile, date_format(regDate, '%Y/%m/%d') as regDate, date_format(outDate, '%Y/%m/%d') as outDate FROM user WHERE userNo=#{userNo}
    </select>


    <select id="selectIdPw">
        SELECT userNo, loginId, pwd FROM user WHERE loginId=#{loginId}
    </select>

    <!-- 다중행 조회를 위한 기능 정의 -->
    <select id="selectList">
        SELECT userNo, loginId, pwd, userName, date_format(bthDate, '%Y-%m-%d') as bthDate, email, postNum, address, phoneNum, profile, date_format(regDate, '%Y/%m/%d') as regDate, date_format(outDate, '%Y/%m/%d') as outDate FROM user

        <where>
            <if test="userName != null and userName != ''">
                userName LIKE concat('%', #{userName}, '%')
            </if>

            <if test="loginId != null and loginId != ''">
                OR loginId LIKE concat('%', #{loginId}, '%')
            </if>
        </where>

        ORDER BY userNo DESC

        <!-- 페이지 구현을 위한 LIMIT절 추가 -->
        <if test="listCount > 0">
            LIMIT ${offset}, ${listCount}
        </if>
    </select>

    <!-- 탈퇴하지 않은 회원만 조회 기능 정의 -->
    <select id="selectUList">
        SELECT userNo, loginId, pwd, userName, date_format(bthDate, '%Y-%m-%d') as bthDate, email, postNum, address, phoneNum, profile, date_format(regDate, '%Y/%m/%d') as regDate, date_format(outDate, '%Y/%m/%d') as outdatee FROM user

        <where>
            <if test="userName != null and userName != ''">
                userName LIKE concat('%', #{userName}, '%')
            </if>

            <if test="loginId != null and loginId != ''">
                OR loginId LIKE concat('%', #{loginId}, '%')
            </if>

            outDate is Null
        </where>

        ORDER BY userNo DESC

        <!-- 페이지 구현을 위한 LIMIT절 추가 -->
        <if test="listCount > 0">
            LIMIT ${offset}, ${listCount}
        </if>
    </select>

    <!-- 데이터 저장을 위한 기능 정의 -->
    <insert id="insertItem">
        INSERT INTO user (loginId, pwd, userName, bthDate, email, postNum, address, phoneNum, profile, regDate) VALUES (#{loginId}, md5(#{pwd}), #{userName}, date_format(#{bthDate}, '%Y-%m-%d'), #{email}, #{postNum}, #{address}, #{phoneNum}, #{profile}, now())
    </insert>

    <!-- 데이터 삭제를 위한 기능 정의 -->
    <delete id="deleteItem">
        DELETE FROM user WHERE userNo=#{userNo}
    </delete>

    <!-- 데이터 갱신을 위한 기능 정의 -->
    <update id="updateItem">
        UPDATE user SET loginId=#{loginId}, pwd=#{pwd}, userName=#{userName}, bthDate=date_format(#{bthDate}, '%Y-%m-%d'), email=#{email}, postNum=#{postNum}, address=#{address}, phoneNum=#{phoneNum}, profile=#{profile}, regDate=date_format(#{regDate}, '%Y/%m/%d'), outDate=date_format(#{outDate}, '%Y/%m/%d')
        WHERE userNo=#{userNo}
    </update>

    <!-- 데이터 수 조회하기  -->
    <select id="selectCountAll">
        SELECT COUNT(*) AS cnt FROM user

        <where>
            <if test="userName != null and userName != ''">
                userName LIKE concat('%', #{userName}, '%')
            </if>

            <if test="loginId != null and loginId != ''">
                OR loginId LIKE concat('%', #{loginId}, '%')
            </if>
        </where>
    </select>

</mapper>
